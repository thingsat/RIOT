From b172a31e2bbda3a32bc191469591150ab98841a4 Mon Sep 17 00:00:00 2001
From: Aymeric Brochier <brochier.aymeric@gmail.com>
Date: Thu, 6 Apr 2023 16:10:54 +0200
Subject: [PATCH] Add http generic method

---
 src/apps/http/http_client.c         | 127 ++++++++++++++++++++++------
 src/include/lwip/apps/http_client.h |  11 ++-
 2 files changed, 106 insertions(+), 32 deletions(-)

diff --git a/src/apps/http/http_client.c b/src/apps/http/http_client.c
index 82da60d7..a1bb8f0d 100644
--- a/src/apps/http/http_client.c
+++ b/src/apps/http/http_client.c
@@ -95,17 +95,16 @@
     "Accept: */*\r\n" \
     "Connection: Close\r\n" /* we don't support persistent connections, yet */ \
     "\r\n"
-#define HTTPC_REQ_11_FORMAT(uri) HTTPC_REQ_11, uri, HTTPC_CLIENT_AGENT
 
+#define HTTPC_REQ_11_FORMAT(uri) HTTPC_REQ_11, uri, HTTPC_CLIENT_AGENT
 /* GET request with host */
+
 #define HTTPC_REQ_11_HOST "GET %s HTTP/1.1\r\n" /* URI */\
     "User-Agent: %s\r\n" /* User-Agent */ \
     "Accept: */*\r\n" \
     "Host: %s\r\n" /* server name */ \
     "Connection: Close\r\n" /* we don't support persistent connections, yet */ \
     "\r\n"
-#define HTTPC_REQ_11_HOST_FORMAT(uri, srv_name) HTTPC_REQ_11_HOST, uri, HTTPC_CLIENT_AGENT, srv_name
-
 /* GET request with proxy */
 #define HTTPC_REQ_11_PROXY "GET http://%s%s HTTP/1.1\r\n" /* HOST, URI */\
     "User-Agent: %s\r\n" /* User-Agent */ \
@@ -113,8 +112,9 @@
     "Host: %s\r\n" /* server name */ \
     "Connection: Close\r\n" /* we don't support persistent connections, yet */ \
     "\r\n"
-#define HTTPC_REQ_11_PROXY_FORMAT(host, uri, srv_name) HTTPC_REQ_11_PROXY, host, uri, HTTPC_CLIENT_AGENT, srv_name
 
+#define HTTPC_REQ_11_HOST_FORMAT(uri, srv_name) HTTPC_REQ_11_HOST, uri, HTTPC_CLIENT_AGENT, srv_name
+#define HTTPC_REQ_11_PROXY_FORMAT(host, uri, srv_name) HTTPC_REQ_11_PROXY, host, uri, HTTPC_CLIENT_AGENT, srv_name
 /* GET request with proxy (non-default server port) */
 #define HTTPC_REQ_11_PROXY_PORT "GET http://%s:%d%s HTTP/1.1\r\n" /* HOST, host-port, URI */\
     "User-Agent: %s\r\n" /* User-Agent */ \
@@ -124,6 +124,35 @@
     "\r\n"
 #define HTTPC_REQ_11_PROXY_PORT_FORMAT(host, host_port, uri, srv_name) HTTPC_REQ_11_PROXY_PORT, host, host_port, uri, HTTPC_CLIENT_AGENT, srv_name
 
+#define HTTPC_GET_OR_DELETE_SIMPLE "%s %s HTTP/1.1\r\n" /* GET|DELETE URI */\
+  "Connection: Close\r\n" /* we don't support persistent connections, yet */ \
+  "\r\n"
+#define HTTPC_GET_OR_DELETE_SIMPLE_HOST "%s %s HTTP/1.1\r\n" /* GET|DELETE URI */\
+  "Host:%s\r\n" /* server name */ \
+  "Connection: Close\r\n" /* we don't support persistent connections, yet */\
+  "\r\n"
+
+#define HTTPC_GET_OR_DELETE_SIMPLE_HOST_FORMAT(method, uri, srv_name) HTTPC_GET_OR_DELETE_SIMPLE_HOST, method, uri, srv_name
+
+#define HTTPC_PUT_OR_POST_MULTIPART_FORM_DATA_FILE "%s %s HTTP/1.1\r\n" /* PUT|POST, URI, BOUNDARY, LEN(BODY), BOUNDARY, FILENAME, , BODY, BOUNDARY */\
+  "Content-Type:multipart/form-data; boundary=%s\r\n" \
+  "Content-Length:%d\r\n" \
+  "Connection: Close\r\n" /* we don't support persistent connections, yet */\
+  "\n"\
+  "%s\r\nContent-Disposition: form-data; name=\"file\"; filename=\"%s\"\r\n\r\n%s\n\r\n%s\r\n"
+
+#define HTTPC_PUT_OR_POST_MULTIPART_FORM_DATA_FILE_HOST "%s %s HTTP/1.1\r\n" /* PUT|POST, URI, BOUNDARY, LEN(BODY), BOUNDARY, FILENAME, , BODY, BOUNDARY */\
+  "Host:%s\r\n" /* server name */ \
+  "Content-Type:multipart/form-data; boundary=%s\r\n"\
+  "Content-Length:%d\r\n"\
+  "Connection: Close\r\n" /* we don't support persistent connections, yet */\
+  "\n"\
+  "--%s\r\nContent-Disposition: form-data; name=\"file\"; filename=\"%s\"\r\n\r\n%s\n\r\n--%s--\r\n" /*size is the length of this part filled */
+
+
+
+#define HTTPC_PUT_OR_POST_MULTIPART_FORM_DATA_FILE_HOST_FORMAT(method, uri, srv_name, boundary, body, filename, size) HTTPC_PUT_OR_POST_MULTIPART_FORM_DATA_FILE_HOST, method, uri, srv_name, boundary, size, boundary, filename, body, boundary
+
 typedef enum ehttpc_parse_state {
   HTTPC_PARSE_WAIT_FIRST_LINE = 0,
   HTTPC_PARSE_WAIT_HEADERS,
@@ -484,7 +513,8 @@ httpc_get_internal_dns(httpc_state_t* req, const char* server_name)
 }
 
 static int
-httpc_create_request_string(const httpc_connection_t *settings, const char* server_name, int server_port, const char* uri,
+httpc_create_request_string(const httpc_connection_t *settings, const char* method, const char* server_name, int server_port,
+                            const char* uri, const char* body, const char* boundary, const char* filename,
                             int use_host, char *buffer, size_t buffer_size)
 {
   if (settings->use_proxy) {
@@ -496,16 +526,26 @@ httpc_create_request_string(const httpc_connection_t *settings, const char* serv
     }
   } else if (use_host) {
     LWIP_ASSERT("server_name != NULL", server_name != NULL);
-    return snprintf(buffer, buffer_size, HTTPC_REQ_11_HOST_FORMAT(uri, server_name));
-  } else {
-    return snprintf(buffer, buffer_size, HTTPC_REQ_11_FORMAT(uri));
+    //just need the uri
+    if(strcmp(method, "GET") == 0 || strcmp(method, "DELETE") == 0){
+      return snprintf(buffer, buffer_size, HTTPC_GET_OR_DELETE_SIMPLE_HOST_FORMAT(method, uri,server_name));
+    } else if(strcmp(method, "PUT") == 0 || strcmp(method, "POST") == 0){
+        // see HTTPC_PUT_OR_POST_MULTIPART_FORM_DATA_FILE_HOST_FORMAT
+        size_t size = 73 + strlen(body) + strlen(filename) + 2 * strlen(boundary);
+      return snprintf(buffer, buffer_size, HTTPC_PUT_OR_POST_MULTIPART_FORM_DATA_FILE_HOST_FORMAT(method, uri,server_name, boundary, body, filename, size));
+
+    }else{
+      printf("erro CMD UNKNOWN\n");
+      return -1;
+    }
   }
+  return -1;
 }
 
 /** Initialize the connection struct */
 static err_t
-httpc_init_connection_common(httpc_state_t **connection, const httpc_connection_t *settings, const char* server_name,
-                      u16_t server_port, const char* uri, altcp_recv_fn recv_fn, void* callback_arg, int use_host)
+httpc_init_connection_common(httpc_state_t **connection, const httpc_connection_t *settings, const char* method,  const char* server_name,
+                      u16_t server_port, const char* uri, const char* body, const char* boundary, const char* filename, altcp_recv_fn recv_fn, void* callback_arg, int use_host)
 {
   size_t alloc_len;
   mem_size_t mem_alloc_len;
@@ -518,7 +558,7 @@ httpc_init_connection_common(httpc_state_t **connection, const httpc_connection_
   LWIP_ASSERT("uri != NULL", uri != NULL);
 
   /* get request len */
-  req_len = httpc_create_request_string(settings, server_name, server_port, uri, use_host, NULL, 0);
+  req_len = httpc_create_request_string(settings, method, server_name, server_port, uri, body, boundary, filename, use_host, NULL, 0);
   if ((req_len < 0) || (req_len > 0xFFFF)) {
     return ERR_VAL;
   }
@@ -557,6 +597,7 @@ httpc_init_connection_common(httpc_state_t **connection, const httpc_connection_
     memcpy(req->server_name, server_name, server_name_len + 1);
   }
   req->uri = req->server_name + server_name_len + 1;
+  //printf("requete sent ? :%s\n", req);
   memcpy(req->uri, uri, uri_len + 1);
 #endif
   req->pcb = altcp_new(settings->altcp_allocator);
@@ -572,7 +613,7 @@ httpc_init_connection_common(httpc_state_t **connection, const httpc_connection_
   altcp_sent(req->pcb, httpc_tcp_sent);
 
   /* set up request buffer */
-  req_len2 = httpc_create_request_string(settings, server_name, server_port, uri, use_host,
+  req_len2 = httpc_create_request_string(settings, method, server_name, server_port, uri, body, boundary, filename, use_host,
     (char *)req->request->payload, req_len + 1);
   if (req_len2 != req_len) {
     httpc_free_state(req);
@@ -591,10 +632,10 @@ httpc_init_connection_common(httpc_state_t **connection, const httpc_connection_
  * Initialize the connection struct
  */
 static err_t
-httpc_init_connection(httpc_state_t **connection, const httpc_connection_t *settings, const char* server_name,
-                      u16_t server_port, const char* uri, altcp_recv_fn recv_fn, void* callback_arg)
+httpc_init_connection(httpc_state_t **connection, const httpc_connection_t *settings, const char* method, const char* server_name,
+                      u16_t server_port, const char* uri, const char* body, const char* boundary, const char* filename, altcp_recv_fn recv_fn, void* callback_arg)
 {
-  return httpc_init_connection_common(connection, settings, server_name, server_port, uri, recv_fn, callback_arg, 1);
+  return httpc_init_connection_common(connection, settings, method, server_name, server_port, uri, body, boundary, filename, recv_fn, callback_arg, 1);
 }
 
 
@@ -603,14 +644,14 @@ httpc_init_connection(httpc_state_t **connection, const httpc_connection_t *sett
  */
 static err_t
 httpc_init_connection_addr(httpc_state_t **connection, const httpc_connection_t *settings,
-                           const ip_addr_t* server_addr, u16_t server_port, const char* uri,
+                           const char* method, const ip_addr_t* server_addr, u16_t server_port, const char* uri, const char* body, const char* boundary, const char* filename,
                            altcp_recv_fn recv_fn, void* callback_arg)
 {
   char *server_addr_str = ipaddr_ntoa(server_addr);
   if (server_addr_str == NULL) {
     return ERR_VAL;
   }
-  return httpc_init_connection_common(connection, settings, server_addr_str, server_port, uri,
+  return httpc_init_connection_common(connection, settings, method, server_addr_str, server_port, uri, body, boundary, filename,
     recv_fn, callback_arg, 1);
 }
 
@@ -629,7 +670,7 @@ httpc_init_connection_addr(httpc_state_t **connection, const httpc_connection_t
  *         or an error code
  */
 err_t
-httpc_get_file(const ip_addr_t* server_addr, u16_t port, const char* uri, const httpc_connection_t *settings,
+httpc_get_file(const char* method, const ip_addr_t* server_addr, u16_t port, const char* uri,const char* body, const char* boundary, const char* filename, const httpc_connection_t *settings,
                altcp_recv_fn recv_fn, void* callback_arg, httpc_state_t **connection)
 {
   err_t err;
@@ -637,8 +678,8 @@ httpc_get_file(const ip_addr_t* server_addr, u16_t port, const char* uri, const
 
   LWIP_ERROR("invalid parameters", (server_addr != NULL) && (uri != NULL) && (recv_fn != NULL), return ERR_ARG;);
 
-  err = httpc_init_connection_addr(&req, settings, server_addr, port,
-    uri, recv_fn, callback_arg);
+  err = httpc_init_connection_addr(&req, settings, method, server_addr, port,
+    uri, body, boundary, filename, recv_fn, callback_arg);
   if (err != ERR_OK) {
     return err;
   }
@@ -661,6 +702,36 @@ httpc_get_file(const ip_addr_t* server_addr, u16_t port, const char* uri, const
 
 /**
  * @ingroup httpc 
+ * HTTP client API: <METHOD> a file by passing server IP address
+ *
+ * @param method method to be called (GET|POST|PUT|DELETE)
+ * @param body body of the request (can be null)
+ * @param server_addr IP address of the server to connect
+ * @param port tcp port of the server
+ * @param uri uri to get from the server, remember leading "/"!
+ * @param settings connection settings (callbacks, proxy, etc.)
+ * @param recv_fn the http body (not the headers) are passed to this callback
+ * @param callback_arg argument passed to all the callbacks
+ * @param connection retreives the connection handle (to match in callbacks)
+ * @return ERR_OK if starting the request succeeds (callback_fn will be called later)
+ *         or an error code
+ */
+err_t
+httpc_method_file(const char* method, const ip_addr_t* server_addr, u16_t port, const char* uri, const char* body, const char* boundary, const char* filename, const httpc_connection_t *settings,
+               altcp_recv_fn recv_fn, void* callback_arg, httpc_state_t **connection)
+{
+  err_t err = ERR_ARG;
+  if (strcmp(method, "GET") == 0 ||
+      strcmp(method, "DELETE") == 0 ||
+      strcmp(method, "POST") == 0 ||
+      strcmp(method, "PUT") == 0) {
+         err = httpc_get_file(method,server_addr, port, uri, body, boundary, filename, settings, recv_fn, callback_arg, connection);
+        return err;
+  }
+  return err;
+}
+/**
+ * @ingroup httpc
  * HTTP client API: get a file by passing server name as string (DNS name or IP address string)
  *
  * @param server_name server name as string (DNS name or IP address string)
@@ -674,7 +745,7 @@ httpc_get_file(const ip_addr_t* server_addr, u16_t port, const char* uri, const
  *         or an error code
  */
 err_t
-httpc_get_file_dns(const char* server_name, u16_t port, const char* uri, const httpc_connection_t *settings,
+httpc_get_file_dns(const char* method, const char* server_name, u16_t port, const char* uri,const char* body, const char* boundary, const char* filename, const httpc_connection_t *settings,
                    altcp_recv_fn recv_fn, void* callback_arg, httpc_state_t **connection)
 {
   err_t err;
@@ -682,7 +753,7 @@ httpc_get_file_dns(const char* server_name, u16_t port, const char* uri, const h
 
   LWIP_ERROR("invalid parameters", (server_name != NULL) && (uri != NULL) && (recv_fn != NULL), return ERR_ARG;);
 
-  err = httpc_init_connection(&req, settings, server_name, port, uri, recv_fn, callback_arg);
+  err = httpc_init_connection(&req, settings, method, server_name, port, uri, body, boundary, filename, recv_fn, callback_arg);
   if (err != ERR_OK) {
     return err;
   }
@@ -815,7 +886,7 @@ httpc_fs_tcp_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
  *         or an error code
  */
 err_t
-httpc_get_file_to_disk(const ip_addr_t* server_addr, u16_t port, const char* uri, const httpc_connection_t *settings,
+httpc_get_file_to_disk(const char* method, const ip_addr_t* server_addr, u16_t port, const char* uri, const char* body, const char* boundary, const char* filename, const httpc_connection_t *settings,
                        void* callback_arg, const char* local_file_name, httpc_state_t **connection)
 {
   err_t err;
@@ -829,8 +900,8 @@ httpc_get_file_to_disk(const ip_addr_t* server_addr, u16_t port, const char* uri
     return err;
   }
 
-  err = httpc_init_connection_addr(&req, &filestate->settings, server_addr, port,
-    uri, httpc_fs_tcp_recv, filestate);
+  err = httpc_init_connection_addr(&req, &filestate->settings, method, server_addr, port,
+    uri, body, boundary, filename, httpc_fs_tcp_recv, filestate);
   if (err != ERR_OK) {
     httpc_fs_free(filestate);
     return err;
@@ -867,7 +938,7 @@ httpc_get_file_to_disk(const ip_addr_t* server_addr, u16_t port, const char* uri
  *         or an error code
  */
 err_t
-httpc_get_file_dns_to_disk(const char* server_name, u16_t port, const char* uri, const httpc_connection_t *settings,
+httpc_get_file_dns_to_disk(const char* method, const char* server_name, u16_t port, const char* uri, const char* body, const char* boundary, const char* filename, const httpc_connection_t *settings,
                            void* callback_arg, const char* local_file_name, httpc_state_t **connection)
 {
   err_t err;
@@ -881,8 +952,8 @@ httpc_get_file_dns_to_disk(const char* server_name, u16_t port, const char* uri,
     return err;
   }
 
-  err = httpc_init_connection(&req, &filestate->settings, server_name, port,
-    uri, httpc_fs_tcp_recv, filestate);
+  err = httpc_init_connection(&req, &filestate->settings, method, server_name, port,
+    uri, body, boundary, filename, httpc_fs_tcp_recv, filestate);
   if (err != ERR_OK) {
     httpc_fs_free(filestate);
     return err;
diff --git a/src/include/lwip/apps/http_client.h b/src/include/lwip/apps/http_client.h
index 8a063083..7b1a8826 100644
--- a/src/include/lwip/apps/http_client.h
+++ b/src/include/lwip/apps/http_client.h
@@ -139,15 +139,18 @@ typedef struct _httpc_connection {
   httpc_headers_done_fn headers_done_fn;
 } httpc_connection_t;
 
-err_t httpc_get_file(const ip_addr_t* server_addr, u16_t port, const char* uri, const httpc_connection_t *settings,
+err_t httpc_method_file(const char* method, const ip_addr_t* server_addr, u16_t port, const char* uri, const char* body, const char* boundary, const char* filename, const httpc_connection_t *settings,
+               altcp_recv_fn recv_fn, void* callback_arg, httpc_state_t **connection);
+
+err_t httpc_get_file(const char* method, const ip_addr_t* server_addr, u16_t port, const char* uri, const char* body, const char* boundary, const char* filename, const httpc_connection_t *settings,
                      altcp_recv_fn recv_fn, void* callback_arg, httpc_state_t **connection);
-err_t httpc_get_file_dns(const char* server_name, u16_t port, const char* uri, const httpc_connection_t *settings,
+err_t httpc_get_file_dns(const char* method, const char* server_name, u16_t port, const char* uri, const char* body, const char* boundary, const char* filename, const httpc_connection_t *settings,
                      altcp_recv_fn recv_fn, void* callback_arg, httpc_state_t **connection);
 
 #if LWIP_HTTPC_HAVE_FILE_IO
-err_t httpc_get_file_to_disk(const ip_addr_t* server_addr, u16_t port, const char* uri, const httpc_connection_t *settings,
+err_t httpc_get_file_to_disk(const char* method, const ip_addr_t* server_addr, u16_t port, const char* uri, const char* body, const char* boundary, const char* filename, const httpc_connection_t *settings,
                      void* callback_arg, const char* local_file_name, httpc_state_t **connection);
-err_t httpc_get_file_dns_to_disk(const char* server_name, u16_t port, const char* uri, const httpc_connection_t *settings,
+err_t httpc_get_file_dns_to_disk(const char* method, const char* server_name, u16_t port, const char* uri,const char* body, const char* boundary, const char* filename, const httpc_connection_t *settings,
                      void* callback_arg, const char* local_file_name, httpc_state_t **connection);
 #endif /* LWIP_HTTPC_HAVE_FILE_IO */
 
-- 
2.38.0

